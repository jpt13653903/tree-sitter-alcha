================================================================================
Definitions
================================================================================

ABC:

pin A;
net A;
void A;
auto A;
byte A;
char A;
num A;
func A;
ABC A;
ABC.DEF A, B, C;

pin    (5) A;
net    (123, 456) A;
void   (A, B) A;
auto   (C) A;
byte   (A.B.C) A;
char   (A.B'C) A;
num    (A[B]) A;
func   (A(B)) A;
ABC    (7, 9, X=10) A;
ABC.DEF(7, Y:= 9, X=10) A, B, C;

pin    (5) <A = a, B = b>A;
net    (123, 456) <A = a, B = b>A;
void   (A, B) <A = a, B = b>A;
auto   (C) <A = a, B = b>A;
byte   (A.B.C) <A = a, B = b>A;
char   (A.B'C) <A = a, B = b>A;
num    (A[B]) <A = a, B = b>A;
func   (A(B)) <A = a, B = b>A;
ABC    (7, 9, X=10) <A = a, B = b>A;
ABC.DEF(7, Y:= 9, X=10) <A = a, B = b>A, B, C;

--------------------------------------------------------------------------------

(module
  (label
    (identifier))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier)
      (identifier))
    (identifier_list
      (variable_def
        (identifier))
      (variable_def
        (identifier))
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (literal
        (dec_literal)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (identifier)
      value: (identifier))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (identifier))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (member_reference
        (member_reference
          (identifier)
          (identifier))
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (attribute_reference
        (member_reference
          (identifier)
          (identifier))
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (slice
        (identifier)
        (array
          (expression_list
            (identifier)))))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (function_call
        (identifier)
        (parameter_list
          value: (identifier))))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal))))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier)
      (identifier))
    (parameter_list
      value: (literal
        (dec_literal))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal)))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal))))
    (identifier_list
      (variable_def
        (identifier))
      (variable_def
        (identifier))
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (literal
        (dec_literal)))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (identifier)
      value: (identifier))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (identifier))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (member_reference
        (member_reference
          (identifier)
          (identifier))
        (identifier)))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (attribute_reference
        (member_reference
          (identifier)
          (identifier))
        (identifier)))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (slice
        (identifier)
        (array
          (expression_list
            (identifier)))))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (base_type)
    (parameter_list
      value: (function_call
        (identifier)
        (parameter_list
          value: (identifier))))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal))))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))))
  (definition
    (type_identifier
      (identifier)
      (identifier))
    (parameter_list
      value: (literal
        (dec_literal))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal)))
      (assigned_param
        parameter: (identifier)
        value: (literal
          (dec_literal))))
    (attribute_list
      (attribute_assignment
        (identifier)
        (identifier))
      (attribute_assignment
        (identifier)
        (identifier)))
    (identifier_list
      (variable_def
        (identifier))
      (variable_def
        (identifier))
      (variable_def
        (identifier)))))

================================================================================
Class Definition
================================================================================

class MyClass{
    D = A;
    E = B;
    F = C;
}

class MyClass(num D, pin E, byte F){
    D = A;
    E = B;
    F = C;
}

class <A=3, B=1, C=7> MyClass(num D, pin E, byte F){
    D = A;
    E = B;
    F = C;
}

class MyClass(num D, pin E, byte F): ParentClass1(A, B, C), ParentClass2(A, B, C){
    D = A;
    E = B;
    F = C;
}

class <A=3, B=1, C=7> MyClass(num D, pin E, byte F): ParentClass1(A, B, C){
    D = A;
    E = B;
    F = C;
}

class <A=3, B=1, C=7> MyClass(num D, pin E, byte F): ParentClass1(A, B, C), ParentClass2(A, B, C){
    D = A;
    E = B;
    F = C;
}

--------------------------------------------------------------------------------

(module
  (class_definition
    (identifier)
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier)))
  (class_definition
    (identifier)
    (def_parameter_list
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier)))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier)))
  (class_definition
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (def_parameter_list
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier)))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier)))
  (class_definition
    (identifier)
    (def_parameter_list
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier)))
    (type_identifier
      (identifier))
    (parameter_list
      value: (identifier)
      value: (identifier)
      value: (identifier))
    (type_identifier
      (identifier))
    (parameter_list
      value: (identifier)
      value: (identifier)
      value: (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier)))
  (class_definition
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (def_parameter_list
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier)))
    (type_identifier
      (identifier))
    (parameter_list
      value: (identifier)
      value: (identifier)
      value: (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier)))
  (class_definition
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (def_parameter_list
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier))
      (def_parameter
        (base_type)
        (identifier)))
    (type_identifier
      (identifier))
    (parameter_list
      value: (identifier)
      value: (identifier)
      value: (identifier))
    (type_identifier
      (identifier))
    (parameter_list
      value: (identifier)
      value: (identifier)
      value: (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))
    (assignment
      (identifier)
      (identifier))))

================================================================================
Enum Definition
================================================================================

enum ABC { A }
enum ABC { A, B, C }

--------------------------------------------------------------------------------

(module
  (enum_definition
    (identifier)
    (identifier))
  (enum_definition
    (identifier)
    (identifier)
    (identifier)
    (identifier)))

================================================================================
Alias, Import, Struct, Group and AccessDirectionGroup
================================================================================

alias A = B.C * D;
import "../whatnot/thingy";
import "../whatnot/thingy" as whatnot;
struct<A = 3, B = 7> ABC{
    pin(15, 8) A;
    net(17) B, C;
    struct BCD{
        pin(15, 8) A;
        net(17) B, C;
    }
    num X;
}
struct<A = 3, B = 7>{
    pin(15, 8) A;
    net(17) B, C;
    struct{
        pin(15, 8) A;
        net(17) B, C;
    }
    num X;
}
group<A = 3, B = 7> ABC{
    pin(15, 8) A;
    net(17) B, C;
    group<C = 8, E = 5> BCD{
        pin(15, 8) A;
        net(17) B, C;
    }
    num X;
}
group<voltage = 3.3, capacitance = 10e-12,
      external_min_delay = 500e-12, external_max_delay = 1e-9> SD{
    pin   <location = "AB6"                   > CLK;
    pin   <location = "W8"                    > CMD;
    pin(4)<location = ["U7", "T7", "V8", "T8"]> DAT;
}

--------------------------------------------------------------------------------

(module
  (alias
    (identifier)
    (multiplicative
      (member_reference
        (identifier)
        (identifier))
      (identifier)))
  (import
    (string))
  (import
    (string)
    (identifier))
  (struct
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal))
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))
        (variable_def
          (identifier))))
    (struct
      (identifier)
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal))
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))))
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))
          (variable_def
            (identifier)))))
    (definition
      (base_type)
      (identifier_list
        (variable_def
          (identifier)))))
  (struct
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal))
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))
        (variable_def
          (identifier))))
    (struct
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal))
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))))
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))
          (variable_def
            (identifier)))))
    (definition
      (base_type)
      (identifier_list
        (variable_def
          (identifier)))))
  (group
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal))
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))
        (variable_def
          (identifier))))
    (group
      (attribute_list
        (attribute_assignment
          (identifier)
          (literal
            (dec_literal)))
        (attribute_assignment
          (identifier)
          (literal
            (dec_literal))))
      (identifier)
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal))
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))))
      (definition
        (base_type)
        (parameter_list
          value: (literal
            (dec_literal)))
        (identifier_list
          (variable_def
            (identifier))
          (variable_def
            (identifier)))))
    (definition
      (base_type)
      (identifier_list
        (variable_def
          (identifier)))))
  (group
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)
          (exponent)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)
          (exponent)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)
          (exponent))))
    (identifier)
    (definition
      (base_type)
      (attribute_list
        (attribute_assignment
          (identifier)
          (string)))
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (attribute_list
        (attribute_assignment
          (identifier)
          (string)))
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal)))
      (attribute_list
        (attribute_assignment
          (identifier)
          (array
            (expression_list
              (string)
              (string)
              (string)
              (string)))))
      (identifier_list
        (variable_def
          (identifier))))))

================================================================================
Arrays and Initialisers
================================================================================

pin A[7][8] := [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
num A=4, B=7, C=1;

--------------------------------------------------------------------------------

(module
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier)
        (array_definition
          (literal
            (dec_literal)))
        (array_definition
          (literal
            (dec_literal)))
        (initialiser
          (array
            (expression_list
              (array
                (expression_list
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))))
              (array
                (expression_list
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))))
              (array
                (expression_list
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))
                  (literal
                    (dec_literal))))))))))
  (definition
    (base_type)
    (identifier_list
      (variable_def
        (identifier)
        (initialiser
          (literal
            (dec_literal))))
      (variable_def
        (identifier)
        (initialiser
          (literal
            (dec_literal))))
      (variable_def
        (identifier)
        (initialiser
          (literal
            (dec_literal)))))))

================================================================================
Control Statements
================================================================================

if (A == B) C = D;
else        E = F;

if      (A == B) C = D;
else if (A == B) E = F;
else if (A == B) G = H;
else if (A == B) I = J;
else if (A == B) K = L;
else if (A == B) M = N;
else             O = P;

if (A == B) {
    C = D;
} else {
    E = F;
}

if      (A == B) C = D;

if      (A == B) C = D;
else if (A == B) E = F;
else if (A == B) G = H;
else if (A == B) I = J;
else if (A == B) K = L;
else if (A == B) M = N;

if (A == B) {
    C = D;
}

for (A in 1..6) X++;
for (A in G) X++;
while (A < 7) X++;
loop(7) X++;
loop X++;

enum STATE {Idle, Writing, Done, Others}
STATE State;

switch(State){
    case(Idle){
        // Do some stuff
        State = Writing;
    }
    case(Writing){
        // Do some stuff
        State = Done;
    }
    case(Done){
        // Do some stuff
        State = Idle;
    }
    default{
        // Do some stuff
        print("The Default State");
    }
}

return;
break;
continue;
return 5;
break 6;
continue 7;

goto Label;

--------------------------------------------------------------------------------

(module
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier)))
    (statement_block
      (assignment
        (identifier)
        (identifier))))
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier)))
    (statement_block
      (if_statement
        (equality
          (identifier)
          (identifier))
        (statement_block
          (assignment
            (identifier)
            (identifier)))
        (statement_block
          (if_statement
            (equality
              (identifier)
              (identifier))
            (statement_block
              (assignment
                (identifier)
                (identifier)))
            (statement_block
              (if_statement
                (equality
                  (identifier)
                  (identifier))
                (statement_block
                  (assignment
                    (identifier)
                    (identifier)))
                (statement_block
                  (if_statement
                    (equality
                      (identifier)
                      (identifier))
                    (statement_block
                      (assignment
                        (identifier)
                        (identifier)))
                    (statement_block
                      (if_statement
                        (equality
                          (identifier)
                          (identifier))
                        (statement_block
                          (assignment
                            (identifier)
                            (identifier)))
                        (statement_block
                          (assignment
                            (identifier)
                            (identifier))))))))))))))
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier)))
    (statement_block
      (assignment
        (identifier)
        (identifier))))
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier))))
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier)))
    (statement_block
      (if_statement
        (equality
          (identifier)
          (identifier))
        (statement_block
          (assignment
            (identifier)
            (identifier)))
        (statement_block
          (if_statement
            (equality
              (identifier)
              (identifier))
            (statement_block
              (assignment
                (identifier)
                (identifier)))
            (statement_block
              (if_statement
                (equality
                  (identifier)
                  (identifier))
                (statement_block
                  (assignment
                    (identifier)
                    (identifier)))
                (statement_block
                  (if_statement
                    (equality
                      (identifier)
                      (identifier))
                    (statement_block
                      (assignment
                        (identifier)
                        (identifier)))
                    (statement_block
                      (if_statement
                        (equality
                          (identifier)
                          (identifier))
                        (statement_block
                          (assignment
                            (identifier)
                            (identifier))))))))))))))
  (if_statement
    (equality
      (identifier)
      (identifier))
    (statement_block
      (assignment
        (identifier)
        (identifier))))
  (for
    (identifier)
    (range
      (literal
        (dec_literal))
      (literal
        (dec_literal)))
    (statement_block
      (assignment
        (identifier))))
  (for
    (identifier)
    (identifier)
    (statement_block
      (assignment
        (identifier))))
  (while
    (relational
      (identifier)
      (literal
        (dec_literal)))
    (statement_block
      (assignment
        (identifier))))
  (loop
    (literal
      (dec_literal))
    (statement_block
      (assignment
        (identifier))))
  (loop
    (statement_block
      (assignment
        (identifier))))
  (enum_definition
    (identifier)
    (identifier)
    (identifier)
    (identifier)
    (identifier))
  (definition
    (type_identifier
      (identifier))
    (identifier_list
      (variable_def
        (identifier))))
  (switch
    (identifier)
    (expression_list
      (identifier))
    (statement_block
      (line_comment)
      (assignment
        (identifier)
        (identifier)))
    (expression_list
      (identifier))
    (statement_block
      (line_comment)
      (assignment
        (identifier)
        (identifier)))
    (expression_list
      (identifier))
    (statement_block
      (line_comment)
      (assignment
        (identifier)
        (identifier)))
    (statement_block
      (line_comment)
      (function_call_statement
        (function_call
          (builtin_func)
          (parameter_list
            value: (string))))))
  (jump)
  (jump)
  (jump)
  (jump
    (literal
      (dec_literal)))
  (jump
    (literal
      (dec_literal)))
  (jump
    (literal
      (dec_literal)))
  (goto
    (identifier)))

================================================================================
Constructs
================================================================================

rtl<A = 3, B = "Hello">(Clk, Reset){
    A = 5;
    B = C + 3;
}
rtl<A = 3, B = "Hello">{
    A = 5;
    B = C + 3;
}
rtl(Clk, Reset){
    A = 5;
    B = C + 3;
}
rtl{
    A = 5;
    B = C + 3;
}

fsm<A = 3, B = "Hello">(Clk, Reset){
    A = 5;
    B = C + 3;
}
fsm<A = 3, B = "Hello">{
    A = 5;
    B = C + 3;
}
fsm(Clk, Reset){
    A = 5;
    B = C + 3;
}
fsm{
    A = 5;
    B = C + 3;
}

hdl<A = 3, B = "Hello">("whatnot.v", "thingy.vhd") ABC(
    A = 3,
    B = 5
){
    pin Clk;
    pin Reset;

    pin(16) Data;
}

--------------------------------------------------------------------------------

(module
  (rtl
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (string)))
    (parameter_list
      value: (identifier)
      value: (identifier))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (rtl
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (string)))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (rtl
    (parameter_list
      value: (identifier)
      value: (identifier))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (rtl
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (fsm
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (string)))
    (parameter_list
      value: (identifier)
      value: (identifier))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (fsm
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (string)))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (fsm
    (parameter_list
      value: (identifier)
      value: (identifier))
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (fsm
    (statement_block
      (assignment
        (identifier)
        (literal
          (dec_literal)))
      (assignment
        (identifier)
        (additive
          (identifier)
          (literal
            (dec_literal))))))
  (hdl
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (string)))
    (string)
    (string)
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))
      (MISSING ";"))
    (definition
      (base_type)
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (identifier_list
        (variable_def
          (identifier))))
    (definition
      (base_type)
      (parameter_list
        value: (literal
          (dec_literal)))
      (identifier_list
        (variable_def
          (identifier))))))

================================================================================
Verification
================================================================================

stimulus <A = 3, B = 5>(1, 2, 3) ABC {
    A = 3;
    B = 5;
}
stimulus <A = 3, B = 5> ABC {
    A = 3;
    B = 5;
}
stimulus (1, 2, 3) ABC {
    A = 3;
    B = 5;
}
stimulus <A = 3, B = 5>(1, 2, 3) {
    A = 3;
    B = 5;
}
stimulus <A = 3, B = 5>(1, 2, 3) ABC {
    A = 3;
    B = 5;
}

emulate <A = 3, B = 5>(1, 2, 3) ABC {
    A = 3;
    B = 5;
}
emulate <A = 3, B = 5> ABC {
    A = 3;
    B = 5;
}
emulate (1, 2, 3) ABC {
    A = 3;
    B = 5;
}
emulate <A = 3, B = 5>(1, 2, 3) {
    A = 3;
    B = 5;
}
emulate <A = 3, B = 5>(1, 2, 3) ABC {
    A = 3;
    B = 5;
}

{
    A = 3;
    B = 5;
} || {
    X++;
    Y--;
}
{
    A = 3;
    B = 5;
} && {
    X++;
    Y--;
}

stimulus(1e-9){
    A = 5;
    #5 B = 7;
    @(posedge Clk);
    @(Clk, Reset);
    @(posedge Clk, negedge Reset);
    wait(A == 7);
    loop #7 C++;
}

assert A == B;

--------------------------------------------------------------------------------

(module
  (stimulus
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (stimulus
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (stimulus
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (stimulus
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (stimulus
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (emulate
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (emulate
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (emulate
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (emulate
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (emulate
    (attribute_list
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal)))
      (attribute_assignment
        (identifier)
        (literal
          (dec_literal))))
    (parameter_list
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal))
      value: (literal
        (dec_literal)))
    (identifier)
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal))))
  (fork_join
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier))
    (assignment
      (identifier)))
  (fork_join
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (assignment
      (identifier))
    (assignment
      (identifier)))
  (stimulus
    (parameter_list
      value: (literal
        (dec_literal)
        (exponent)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (wait
      (literal
        (dec_literal)))
    (assignment
      (identifier)
      (literal
        (dec_literal)))
    (wait
      (sensitivity_list
        (identifier)))
    (wait
      (sensitivity_list
        (identifier)
        (identifier)))
    (wait
      (sensitivity_list
        (identifier)
        (identifier)))
    (wait
      (sequence
        (equality
          (identifier)
          (literal
            (dec_literal)))))
    (loop
      (statement_block
        (wait
          (literal
            (dec_literal)))
        (assignment
          (identifier)))))
  (assert
    (sequence
      (equality
        (identifier)
        (identifier)))))

